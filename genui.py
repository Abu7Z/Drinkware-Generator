
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import *
from tkinter import filedialog
from PIL import Image, ImageTk
import os
from http import HTTPStatus
import dashscope
import random
import re




OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\yinya\Desktop\F Demo\assets\frame0")

save_path = "C:\\Users\\yinya\\Desktop\\F Demo"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


# 上传参考图相关的全局变量
uploaded_image_display = None  # 用于跟踪上传图片的显示项目
is_cancel_mode = False  # 跟踪按钮是否处于取消模式
ref_image_path = ""  # 用于记录上传图片的本地路径


def upload_and_display_image():
    global uploaded_image_display, is_cancel_mode, ref_image_path
    
    if not is_cancel_mode:
        # 使用filedialog让用户选择一个图片文件
        filepath = filedialog.askopenfilename()
        if not filepath:
            return
        
        # 记录用户选择的图片的本地路径
        ref_image_path = filepath
        #print(f"图片文件路径: {filepath}")

        # 加载用户选择的图片，并缩放到200x200
        img = Image.open(filepath)
        img_resized = img.resize((200, 200), Image.Resampling.LANCZOS)
        photo_img = ImageTk.PhotoImage(img_resized)

        # 在原有image_6上叠加显示上传的图片
        uploaded_image_display = canvas.create_image(
            854.0, 762.0, image=photo_img)
        canvas.image = photo_img  # 防止图片被垃圾回收

        # 更新按钮为取消模式
        new_button_image = PhotoImage(file=relative_to_assets("button_1_cancel.png"))
        button_1.config(image=new_button_image)
        button_1.image = new_button_image  # 防止图片被垃圾回收
        is_cancel_mode = True
    else:
        # 如果处于取消模式，删除上传的图片显示项目，恢复按钮到上传模式
        if uploaded_image_display:
            canvas.delete(uploaded_image_display)
            uploaded_image_display = None
        
        # 清空记录的图片路径
        ref_image_path = ""
        
        # 恢复按钮图片为上传模式
        original_button_image = PhotoImage(file=relative_to_assets("button_1.png"))
        button_1.config(image=original_button_image)
        button_1.image = original_button_image
        is_cancel_mode = False


def read_append_content(filename):
    append_path = os.path.join(os.path.dirname(__file__), filename)
    with open(append_path, 'r', encoding='utf-8') as file:
        return file.read().strip()


# 调用文本相关API的函数
def qwen_text_api(prompt):
    response = dashscope.Generation.call(
        model=dashscope.Generation.Models.qwen_max,
        prompt=prompt,
        seed=random.randint(1, 10000)
    )
    if response.status_code == HTTPStatus.OK:
        return response.output.text
    else:
        return f"Error: {response.code}, Message: {response.message}"
    

def qwen_text_api_plus(prompt):
    response = dashscope.Generation.call(
        model=dashscope.Generation.Models.qwen_plus,
        prompt=prompt,
        seed=random.randint(1, 10000)
    )
    if response.status_code == HTTPStatus.OK:
        return response.output.text
    else:
        return f"Error: {response.code}, Message: {response.message}"


# 调用图片相关API的函数
def qwen_image_api(image_url, query):
    messages = [
        {
            "role": "user",
            "content": [
                {"image": image_url},
                {"text": query}
            ]
        }
    ]
    response = dashscope.MultiModalConversation.call(model='qwen-vl-max',
                                                     messages=messages,
                                                     seed=random.randint(1, 10000)
                                                     )
    #print(response)
    if response.status_code == HTTPStatus.OK:
        # 此处处理API返回的列表，获取'text'键的值
        for item in response.output.choices[0].message.content:
            if 'text' in item:
                return item['text']
    else:
        return f"Error: {response.code}, Message: {response.message}"


# 设置result为全局变量，默认值为空字符串
result = ""

# 生成设计方案·文本
def generate_design_text():
    global result
    global ref_image_path  # 用于记录上传的图片路径

    # 获取三个输入框中的内容
    input1_content = entry_1.get()  # Entry控件
    input2_content = entry_2.get()  # Entry控件
    input3_content = entry_3.get("1.0", END).strip()  # Text控件

    # 组合输入框内容
    combined_content = f"{input2_content}{input1_content}。{input3_content}。"

    # 读取文件内容
    fetch_design_append = read_append_content("fetch_design_append.txt")
    #imageapi_append_content = read_append_content("imageapi_fetch_design_append.txt")

    # 根据是否上传了图片调用不同的API
    if ref_image_path:
        final_text = f"以这张图片为灵感设计{combined_content} {fetch_design_append}"
        print(final_text)
        # 调用图片相关API并打印结果
        result = qwen_image_api(ref_image_path, final_text)
    else:
        final_text = f"{combined_content} {fetch_design_append}"
        print(final_text)
        # 调用文本相关API并打印结果
        result = qwen_text_api(final_text)
    print("###")
    print(ref_image_path)
    print(result)

    # 写入结果到文本文件
    with open(os.path.join(save_path, 'design_description.txt'), 'w', encoding='utf-8') as result_file:
        result_file.write(result)


def description_to_para():
    """
    读取design_description.txt文件的内容，附加get_para_append.txt的内容，
    然后调用文本API获取返回信息，并处理这个信息。
    """
    # 读取design_description.txt中的内容
    design_description = read_append_content("design_description.txt")
    
    # 读取get_para_append.txt文件的内容并附加
    para_append = read_append_content("get_para_append.txt")
    combined_text = f"{design_description} {para_append}"
    
    # 调用文本相关API并获取result
    get_para_result = qwen_text_api_plus(combined_text)
    
    #print(get_para_result)
  # 写入结果到para_result.txt
    para_result_path = os.path.join(save_path, 'para_result.txt')
    with open(para_result_path, 'w', encoding='utf-8') as result_file:
        result_file.write(get_para_result)
    
    # 读取para_result.txt中的内容
    with open(para_result_path, 'r', encoding='utf-8') as file:
        para_content = file.read()

    # 使用正则表达式提取graphic后的值
    graphic_match = re.search(r'graphic: (.+)', para_content)
    if graphic_match:
        graphic_values = graphic_match.group(1)  # 获取graphic值

        # 写入到graphic_prompt.txt
        graphic_prompt_path = os.path.join(save_path, 'graphic_prompt.txt')
        with open(graphic_prompt_path, 'w', encoding='utf-8') as graphic_file:
            graphic_file.write(graphic_values)


def on_enter(event):
    global hover_window
    hover_window = Toplevel()
    hover_window.overrideredirect(True)

    # 窗口大小
    window_width = 768
    window_height = 432

    # 计算新的 x 坐标和 y 坐标，使得窗口在鼠标左上方展开
    new_x = event.x_root - window_width
    new_y = event.y_root - window_height

    if new_x < 0:  # 确保窗口不会超出屏幕左侧
        new_x = 0
    if new_y < 0:  # 确保窗口不会超出屏幕顶部
        new_y = 0

    hover_window.geometry("{}x{}+{}+{}".format(window_width, window_height, new_x, new_y))

    bg_color = "#3E4756"
    text_color = "#ffffff"

    # 创建滚动条
    scrollbar = Scrollbar(hover_window)
    scrollbar.pack(side=RIGHT, fill=Y)

    # 创建文本小部件并将其与滚动条关联
    text_widget = Text(hover_window, font=("思源黑体 Light", 12), wrap="word",
                       bg=bg_color, fg=text_color, yscrollcommand=scrollbar.set)
    text_widget.pack(expand=True, fill="both")
    text_widget.insert(END, result)
    text_widget.config(state="disabled")  # 只读

    # 配置滚动条
    scrollbar.config(command=text_widget.yview)


def on_leave(event):
    hover_window.destroy()


### 界面设计
window = Tk()

# 定义窗口的宽度和高度
window_width = 1024
window_height = 1440

# 设置窗口的初始位置（左上角）和大小
window.geometry(f"{window_width}x{window_height}+0+0")

window.title("Gen")

window.configure(bg="#12101A")


# 界面背景
canvas = Canvas(
    window,
    bg = "#12101A",
    height = 1440,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    512.0,
    720.0,
    image=image_image_1
)

# 标题
canvas.create_text(
    45.0,
    27.0,
    anchor="nw",
    text="Drinkware Generator",
    fill="#FFFFFF",
    font=("Arial", 48 * -1, "bold")
)

# 开发者
canvas.create_text(
    717.0,
    49.0,
    anchor="nw",
    text="Developed by ZHIYUAN",
    fill="#FFFFFF",
    font=("Arial", 24 * -1)
)

# 横线1
image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    511.0,
    107.0,
    image=image_image_2
)

# 区域1背景
image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    511.0,
    314.0,
    image=image_image_3
)

canvas.create_text(
    69.0,
    166.0,
    anchor="nw",
    text="饮具品类",
    fill="#FFFFFF",
    font=("思源黑体", 32 * -1, 'bold')
)

# 饮具品类输入框
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    512.0,
    263.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#3E3C44",
    font=("思源黑体 Light", 22*-1),
    fg="#FFFFFF",
    highlightthickness=0
)
entry_1.place(
    x=73.0 + 14,
    y=227.0 + 7,
    width=878.0 - 14,
    height=71.0 - 7
)
entry_1.insert(0, "茶杯")

canvas.create_text(
    69.0,
    325.0,
    anchor="nw",
    text="基础描述",
    fill="#FFFFFF",
    font=("思源黑体", 32 * -1, 'bold')
)

# 基础描述输入框
entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    512.0,
    422.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#3E3C44",
    font=("思源黑体 Light", 22*-1),
    fg="#FFFFFF",
    highlightthickness=0
)
entry_2.place(
    x=73.0 + 14,
    y=386.0 + 7,
    width=878.0 - 14,
    height=71.0 - 7
)

# 区域2背景
image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    510.0,
    705.0,
    image=image_image_4
)

canvas.create_text(
    68.0,
    541.0,
    anchor="nw",
    text="叙事性输入",
    fill="#FFFFFF",
    font=("思源黑体", 32 * -1, 'bold')
)

# 横线2
image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    511.0,
    604.0,
    image=image_image_5
)

canvas.create_text(
    68.0,
    620.0,
    anchor="nw",
    text="文本媒介",
    fill="#FFFFFF",
    font=("思源黑体", 22 * -1, 'bold')
)

canvas.create_text(
    154.0,
    629.0,
    anchor="nw",
    text="（产品故事、用户特质、使用情境...）",
    fill="#FFFFFF",
    font=("思源黑体 Light", 16 * -1)
)

# 叙事文本输入框
entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    278.0,
    762.0,
    image=entry_image_3
)
entry_3 = Text(
    bd=0,
    bg="#3E3C44",
    font=("思源黑体 Light", 22*-1),
    fg="#FFFFFF",
    highlightthickness=0
)
entry_3.place(
    x=72.0 + 14,
    y=662.0 + 7,
    width=412.0 - 14,
    height=198.0 - 7
)

# 图像输入按钮
canvas.create_text(
    535.0,
    620.0,
    anchor="nw",
    text="图像媒介",
    fill="#FFFFFF",
    font=("思源黑体", 22 * -1, 'bold')
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=upload_and_display_image,
    relief="flat"
)
button_1.place(
    x=534.0,
    y=662.0,
    width=200.0,
    height=200.0
)

# 图片显示框
image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    854.0,
    762.0,
    image=image_image_6
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    511.0,
    1003.0,
    image=image_image_7
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=generate_design_text,
    relief="flat"
)
button_2.place(
    x=69.0,
    y=957.0,
    width=420.0,
    height=93.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    #command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=536.0,
    y=957.0,
    width=420.0,
    height=93.0
)

# 绑定鼠标进入和离开事件到按钮上
button_3.bind("<Enter>", on_enter)
button_3.bind("<Leave>", on_leave)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    511.0,
    1195.0,
    image=image_image_8
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=description_to_para,
    relief="flat"
)
button_4.place(
    x=69.0,
    y=1149.0,
    width=420.0,
    height=93.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=536.0,
    y=1149.0,
    width=420.0,
    height=93.0
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    778.0,
    1345.0,
    image=image_image_9
)

canvas.create_text(
    826.0,
    1321.0,
    anchor="nw",
    text="生成中...",
    fill="#FFFFFF",
    font=("思源黑体", 32 * -1, 'bold')
)

window.resizable(False, False)
window.mainloop()
